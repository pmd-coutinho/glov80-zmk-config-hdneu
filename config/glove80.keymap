
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Symbol 2
#define LAYER_Number 3
#define LAYER_Function 4
#define LAYER_Cursor 5
#define LAYER_Mouse 6
#define LAYER_akl_A 7
#define LAYER_akl_C 8
#define LAYER_akl_G 9
#define LAYER_akl_P 10
#define LAYER_akl_B 11
#define LAYER_akl_D 12
#define LAYER_akl_M 13
#define LAYER_akl_U 14
#define LAYER_Magic 15
#define LAYER_QWERTY 16
#define SELECT_CONT 17
#define SELECT_CONT_SL 18
#define EDITING_MO 19

#define BASE_LAYERS LAYER_Base LAYER_QWERTY

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
#define  LEFT_HAND_KEYS    \
          0  1  2  3  4    \
         10 11 12 13 14 15 \
         22 23 24 25 26 27 \
         34 35 36 37 38 39 \
         46 47 48 49 50 51 \
         64 65 66 67 68
#define                                  RIGHT_HAND_KEYS \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
#define          LEFT_THUMB_KEYS \
                        69 52    \
                         70 53   \
                          71 54

#define                           RIGHT_THUMB_KEYS \
                                    57 74          \
                                   56 73           \
                                  55 72

#define LT_TAPPING_TERM_MS 250
#define TAP_DANCE_TAPPING_TERM_MS 200

#define HRM_TAP_TERM_MS 280
#define HRM_FAST_TAP_TERM_MS 200
#define HRM_QUICK_TAP_MS 220
#define HRM_REQUIRE_PRIOR_IDLE_MS 150

#define AUTO_SHIFT_TAP_TERM_MS 260
#define CUSTOM_MOD_TAP_TERM_MS 200
#define ALT_TAB_TIMEOUT_MS 500
#define ADAPTIVE_LAYER_TIMEOUT_MS 100

#define COMBO_TIMEOUT_MS 50
#define FAST_COMBO_TIMEOUT_MS 25

#define HOME_ROW_MOD_PROPS(TAP_TERM_MS) \
    compatible = "zmk,behavior-hold-tap"; \
    tapping-term-ms = <TAP_TERM_MS>; \
    quick-tap-ms = <HRM_QUICK_TAP_MS>; \
    require-prior-idle-ms = <HRM_REQUIRE_PRIOR_IDLE_MS>; \
    flavor = "balanced"; \
    hold-trigger-on-release; \
    #binding-cells = <2>;

#define MOD_TAP_PROPS \
    compatible = "zmk,behavior-hold-tap"; \
    tapping_term_ms = <CUSTOM_MOD_TAP_TERM_MS>; \
    flavor = "hold-preferred"; \
    #binding-cells = <2>;

#define INST_MACRO(NAME, ...) \
    ZMK_MACRO(NAME, \
        wait-ms = <0>; \
        tap-ms = <0>; \
        __VA_ARGS__ \
    )

#define INST_VIM_CMD_MACRO(NAME, CMD) \
    INST_MACRO(NAME, \
        bindings = <&kp ESC &kp COLON CMD &kp ENTER>; \
    )

#define DIGRAM_MACRO(A, B) \
    INST_MACRO(A ## B, \
        bindings = <&kp A &kp B>; \
    )

#define AK_MACRO(KEY) \
    INST_MACRO(AK_ ## KEY, \
        bindings = <&kp KEY>, <&aksl LAYER_akl_ ## KEY>; \
    )

#define AK_FIXUP_MACRO(KEY1, KEY2) \
    INST_MACRO(AK_ ## KEY1 ## KEY2, \
        bindings = <&kp BSPC>, <&kp KEY1>, <&kp KEY2>; \
    )

#define LAYER_COMBO(NAME, LAYER_NAME, ...) \
    combo_ ## NAME { \
        layers = <LAYER_ ## LAYER_NAME>; \
        timeout-ms = <COMBO_TIMEOUT_MS>; \
        __VA_ARGS__ \
    };

#define FAST_LAYER_COMBO(NAME, LAYER_NAME, ...) \
    combo_ ## NAME { \
        layers = <LAYER_ ## LAYER_NAME>; \
        timeout-ms = <FAST_COMBO_TIMEOUT_MS>; \
        __VA_ARGS__ \
    };

behaviors {
    behavior_caps_word {
        continue-list = <UNDERSCORE MINUS BACKSPACE DELETE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
    };

    // Format: &hm_l <HOLD> <TAP>
    hm_l: home_row_mods_left {
        HOME_ROW_MOD_PROPS(HRM_TAP_TERM_MS)

        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
    };
    hm_l_akd: home_row_mods_left_akd {
        HOME_ROW_MOD_PROPS(HRM_FAST_TAP_TERM_MS)
        bindings = <&kp>, <&AK_D>;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
    };
    hm_r: home_row_mods_right {
        HOME_ROW_MOD_PROPS(HRM_TAP_TERM_MS)
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
    };
    hm_r_aka: home_row_mods_right_aka {
        HOME_ROW_MOD_PROPS(HRM_FAST_TAP_TERM_MS)
        bindings = <&kp>, <&AK_A>;
        hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
    };

    // Format: &mt_* <HOLD> <TAP>
    mt_tmux: mod_tap_tmux {
        MOD_TAP_PROPS
        bindings = <&kp>, <&tmux_cmd>;
    };
    mt_vim_q: mod_tap_vim_q {
        MOD_TAP_PROPS
        bindings = <&kp>, <&vim_q>;
    };
    mt_vim_w: mod_tap_vim_w {
        MOD_TAP_PROPS
        bindings = <&kp>, <&vim_w>;
    };
    mt_caps_word: mod_tap_caps_word {
        MOD_TAP_PROPS
        bindings = <&kp>, <&caps_word>;
    };

    // Format: &as <HOLD> <TAP>
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping_term_ms = <AUTO_SHIFT_TAP_TERM_MS>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    ascc: auto_shift_colcol {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping_term_ms = <AUTO_SHIFT_TAP_TERM_MS>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&colcol>, <&kp>;
    };

    skat: sticky_key_alt_tab {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <ALT_TAB_TIMEOUT_MS>;
        quick-release;
        ignore-modifiers;
    };
    td_sk_ls_enter: tap_dance_sticky_key_left_shift_enter {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <TAP_DANCE_TAPPING_TERM_MS>;
        bindings = <&mt LSHIFT ENTER>, <&kp ENTER>;
    };
    td_lt_num_bksp: tap_dance_layer_number_backspace {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <TAP_DANCE_TAPPING_TERM_MS>;
        bindings = <&lt LAYER_Number BSPC>, <&kp BSPC>;
    };
    td_lt_sym_spc: tap_dance_layer_symbol_space {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <TAP_DANCE_TAPPING_TERM_MS>;
        bindings = <&lt LAYER_Symbol SPACE>, <&kp SPACE>;
    };

    aksl: adaptive_key_sticky_layer {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&mo>;
        release-after-ms = <ADAPTIVE_LAYER_TIMEOUT_MS>;
        quick-release;
    };
};

macros {
    // Tmux prefix (Ctrl-A in tmux.conf) + key
    tmux_cmd: tmux_cmd {
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        bindings = <&kp LC(A)>
                 , <&macro_param_1to1>
                 , <&kp MACRO_PLACEHOLDER>
                 ;
    };

    // :bn<CR>
    INST_VIM_CMD_MACRO(vim_bn, &kp B &kp N)
    // :bp<CR>
    INST_VIM_CMD_MACRO(vim_bp, &kp B &kp P)
    // :wincmd w<CR>
    INST_VIM_CMD_MACRO(vim_chwin, &kp W &kp I &kp N &kp C &kp M &kp D &kp SPACE &kp W)
    // :w<CR>
    INST_VIM_CMD_MACRO(vim_w, &kp W)
    // :q<CR>
    INST_VIM_CMD_MACRO(vim_q, &kp Q)

    ZMK_MACRO(alt_tab,
        bindings = <&macro_press &kp LALT>    // Leave ALT down to keep menu up
                 , <&macro_tap &kp TAB>       // Combines with shift fine
                 , <&macro_tap &skat LALT>    // This will release ALT after a timeout
                 , <&macro_release &kp LALT>  // Now release the previous hold
                 ;
    )

    ZMK_MACRO(colcol,
        bindings = <&kp COLON>, <&kp COLON>;
    )

    DIGRAM_MACRO(Q, U)
    DIGRAM_MACRO(T, H)
    DIGRAM_MACRO(C, H)
    DIGRAM_MACRO(S, H)
    DIGRAM_MACRO(W, H)
    DIGRAM_MACRO(G, H)
    DIGRAM_MACRO(P, H)

    AK_MACRO(A)
    AK_MACRO(C)
    AK_MACRO(G)
    AK_MACRO(P)
    AK_MACRO(B)
    AK_MACRO(D)
    AK_MACRO(M)
    AK_MACRO(U)
    AK_FIXUP_MACRO(L, V)
    AK_FIXUP_MACRO(L, B)
};

combos {
    compatible = "zmk,combos";

    // Left-hand bottom row combos based on Hands Down
    // Outputs are QWERTY shortcuts
    // X+F -> Ctrl+Z
    LAYER_COMBO(undo, Base,
        bindings = <&kp LC(Z)>;
        key-positions = <47 48>;
    )
    // X+L -> Ctrl+X
    LAYER_COMBO(cut, Base,
        bindings = <&kp LC(X)>;
        key-positions = <47 49>;
    )
    // F+L -> Ctrl+C
    FAST_LAYER_COMBO(copy, Base,
        bindings = <&kp LC(C)>;
        key-positions = <48 49>;
    )
    // L+C -> Ctrl+V
    FAST_LAYER_COMBO(paste, Base,
        bindings = <&kp LC(V)>;
        key-positions = <49 50>;
    )
    // X+F+L -> Ctrl+Shift+C
    LAYER_COMBO(copy_shift, Base,
        bindings = <&kp LC(LS(C))>;
        key-positions = <47 48 49>;
    )
    // F+L+C -> Ctrl+Shift+V
    LAYER_COMBO(paste_shift, Base,
        bindings = <&kp LC(LS(V))>;
        key-positions = <48 49 50>;
    )

    // Hands Down combos
    // uy -> qu
    FAST_LAYER_COMBO(qu, Base,
        bindings = <&QU>;
        key-positions = <59 61>;
    )
};
};

/* Automatically generated macro definitions */
/ {
    macros {
    
    };
};

#include "alt_morphs.keymap"
#include "sel_macros.keymap"

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
        &kp LG(LS(S))         &to 16        &trans        &trans          &trans                                                                                                                                &kp F1       &kp F11         &kp F12     &kp LC(N1)  &kp LC(N2)
            &kp EQUAL         &kp N1        &kp N2        &kp N3          &kp N4  &kp N5                                                                                    &kp N6                              &kp N7        &kp N8          &kp N9         &kp N0      &trans
              &kp TAB          &kp W         &kp F         &AK_M           &AK_P   &kp V                                                                            &as FSLH COMMA                        &as AMPS DOT         &kp Q  &as QMARK EXCL    &as DQT SQT       &kp Z
               &trans  &hm_l LCTRL R  &hm_l LALT S  &hm_l LGUI N  &hm_l LSHIFT T   &AK_B                                                                            &as COLON SEMI  &hm_r_aka RSHIFT MACRO_PLACEHOLDER  &hm_r RGUI E    &hm_r LALT I  &hm_r RCTRL H       &kp J
            &kp LC(A)          &kp X         &AK_C         &kp L           &AK_D   &AK_G   &lt 4 ESC      &kp DEL  &kp BSPC  &kp SPACE  &kp LSHFT      &kp TAB  &as KP_MINUS UNDER                               &AK_U         &kp O           &kp Y          &kp K   &kp PG_UP
 &magic LAYER_Magic 0       &kp LEFT        &kp UP      &kp DOWN       &kp RIGHT          &lt 5 BSPC  &lt 3 LSHFT    &lower     &lower  &lt 6 RET  &lt 2 SPACE                                                &kp LEFT      &kp DOWN          &kp UP      &kp RIGHT   &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
               &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
               &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
               &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
               &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
               &trans  &trans  &trans  &trans  &trans  &trans  &tog 4  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &magic LAYER_Magic 0  &trans  &trans  &trans  &trans          &tog 5  &tog 3  &trans  &trans  &trans  &tog 2          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Symbol {
            bindings = <
               &trans     &trans     &trans     &trans    &trans                                                                                                  &trans     &trans     &trans  &trans  &trans
            &kp GRAVE     &trans     &trans     &trans    &trans     &trans                                                                            &trans     &trans     &trans     &trans  &trans  &trans
              &kp SQT   &kp LBKT   &kp LBRC   &kp RBRC  &kp RBKT   &kp PLUS                                                                            &trans   &kp AMPS   &kp STAR   &kp HASH  &trans  &trans
             &kp EXCL  &kp CARET   &kp LPAR   &kp RPAR  &kp DLLR  &kp QMARK                                                                            &trans  &kp LSHFT  &kp LCTRL  &kp GRAVE  &trans  &trans
             &kp HASH     &kp LT  &kp EQUAL  &kp MINUS    &kp GT   &kp STAR   &kp BSLH                         &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans  &trans
 &magic LAYER_Magic 0  &kp TILDE   &kp PIPE   &kp FSLH   &kp DOT             &kp PRCNT  &ascc MACRO_PLACEHOLDER COLON  &kp AT  &tog 2  &trans  &trans             &trans     &trans     &trans  &trans  &trans
            >;
        };

        layer_Number {
            bindings = <
               &trans  &trans     &trans     &trans     &trans                                                                                 &trans     &trans    &trans     &trans     &trans
               &trans  &trans     &trans     &trans     &trans       &trans                                                      &kp TILDE  &kp CARET   &kp HASH  &kp DLLR     &kp AT     &trans
               &trans  &trans  &kp LS(G)      &kp K     &trans       &trans                                                      &kp PRCNT     &kp N7     &kp N8    &kp N9  &kp COLON      &kp K
           &kp KP_NUM  &trans   &kp LALT  &kp LCTRL  &kp LSHFT  &tmux_cmd S                                                       &kp PLUS     &kp N4     &kp N5    &kp N6  &kp MINUS      &kp J
               &trans  &trans     &trans      &kp J  &kp LC(A)  &tmux_cmd Q  &trans  &trans  &trans  &trans  &kp LC(A)  &kp DOT   &kp STAR     &kp N1     &kp N2    &kp N3   &kp FSLH  &kp LS(G)
 &magic LAYER_Magic 0  &trans     &trans     &trans     &trans               &trans  &trans  &tog 3  &trans  &kp COMMA   &kp N0                &kp LT  &kp EQUAL    &kp GT      &kp T      &kp F
            >;
        };

        layer_Function {
            bindings = <
               &trans  &trans  &trans  &trans  &trans                                                                                           &trans                          &trans                              &trans  &trans           &trans
               &trans  &trans  &trans  &trans  &trans  &trans                                                  &kp DEL                         &kp F10                         &kp F11                             &kp F12  &trans           &trans
               &trans  &trans  &trans  &trans  &trans  &trans                                                  &kp INS                          &kp F7                          &kp F8                              &kp F9  &trans           &trans
             &kp CAPS  &trans  &trans  &trans  &trans  &trans                                                   &trans  &mt_vim_q F4 MACRO_PLACEHOLDER  &mt_vim_w F5 MACRO_PLACEHOLDER  &mt_caps_word F6 MACRO_PLACEHOLDER  &trans         &kp SLCK
               &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans                   &mt_tmux F1 X            &mt_tmux F2 KP_MINUS                       &mt_tmux F3 V  &trans        &kp PSCRN
 &magic LAYER_Magic 0  &trans  &trans  &trans  &trans          &trans  &trans  &tog 4  &trans  &trans  &trans                                   &trans                          &trans                              &trans  &trans  &kp PAUSE_BREAK
            >;
        };

        layer_Cursor {
            bindings = <
               &trans    &trans    &trans      &trans     &trans                                                                       &trans     &trans     &trans     &trans  &trans
               &trans    &trans    &trans  &vim_chwin     &trans     &trans                                                  &trans    &trans     &trans     &trans     &trans  &trans
               &trans    &trans  &alt_tab     &vim_bp    &vim_bn    &kp TAB                                                  &kp HOME      &kp PG_DN      &kp PG_UP      &kp END      &kp LG(X)  &trans
               &trans  &kp LCTRL  &kp LALT   &kp LGUI  &kp LSHFT  &kp SPACE                                                  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &copy_sel_all_mac  &trans
               &trans    &trans    &trans      &trans  &kp LC(A)    &kp RET  &trans  &trans  &trans  &trans  &trans  &trans  &sel_wd_bwd_mac  &sel_ln_fwd_mac  &sel_ln_bwd_mac  &sel_wd_fwd_mac &paste_undo_mac  &trans
 &magic LAYER_Magic 0    &trans    &trans      &trans     &trans             &trans  &trans  &tog 5  &trans  &trans  &trans            &trans     &trans     &trans     &trans  &trans
            >;
        };

        layer_Mouse {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &mkp 2  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &mkp 0  &mkp 1  &trans  &tog 6  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_A {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                   &kp U  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_C {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans   &kp D  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans   &kp P  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_G {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans   &kp L  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_P {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans   &kp L  &trans  &AK_LV                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_B {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans   &kp L  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans   &kp L  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_D {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &AK_LB                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_M {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans   &AK_B                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_akl_U {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &kp A  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_QWERTY {
            bindings = <
 &trans         &to 0       &trans        &trans          &trans                                                                          &trans        &trans        &trans    &trans     &trans
 &trans         &trans        &trans        &trans          &trans  &trans                                                  &trans          &trans        &trans        &trans    &trans     &trans
 &trans          &kp Q         &kp W         &kp E           &kp R   &kp T                                                   &kp Y           &kp U         &kp I         &kp O     &kp P  &kp MINUS
 &trans  &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D  &hm_l LSHIFT F   &kp G                                                   &kp H  &hm_r RSHIFT J  &hm_r RGUI K  &hm_r RALT L  &kp SEMI    &kp SQT
 &trans          &kp Z         &kp X         &kp C           &kp V   &kp B  &trans  &trans  &trans  &trans  &trans  &trans   &kp N           &kp M     &kp COMMA       &kp DOT  &kp FSLH     &trans
 &trans         &trans        &trans        &trans          &trans          &trans  &trans  &trans  &trans  &trans  &trans                  &trans        &trans        &trans    &trans     &trans
            >;
        };

        select_cont_layer {
            bindings = <
  &none   &none   &none   &none   &none                                                                                 &none                 &none                 &none                &trans  &trans
  &none   &none   &none   &none   &none   &none                                                   &none                 &none                 &none                 &none                &trans  &trans
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans                &trans                &trans                &trans                &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans                &trans                &trans                &trans                &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans  &cont_sel_wd_bwd_mac  &cont_sel_ln_fwd_mac  &cont_sel_ln_bwd_mac  &cont_sel_wd_fwd_mac  &trans   &none
 &trans   &none   &none   &none   &none          &trans  &trans   &none   &none  &trans  &trans                         &none                 &none                 &none                 &none   &none
            >;
        };

        select_cont_sl_layer {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none  &trans  &trans
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none  &trans  &trans
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none
 &trans   &none   &none   &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none   &none   &none   &none   &none
            >;
        };

        editing_mo_layer {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none  &trans  &trans
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none  &trans  &trans
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans   &none
  &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &none   &none   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none
 &trans   &none   &none   &none   &none          &trans  &trans   &none   &none  &trans  &trans           &none   &none   &none   &none   &none
            >;
        };
    };
};